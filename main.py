
import os
import csv
import logging
import requests
from datetime import datetime
import ccxt
import pandas as pd
# Logging setup

logging.basicConfig(
    level=logging.INFO,  # thay v√¨ DEBUG/INFO
    format="%(asctime)s - %(levelname)s - %(message)s"
)
# ƒê·ªçc bi·∫øn m√¥i tr∆∞·ªùng
SPREADSHEET_URL = os.environ.get("SPREADSHEET_URL")
OKX_API_KEY = os.environ.get("OKX_API_KEY")
OKX_API_SECRET = os.environ.get("OKX_API_SECRET")
OKX_API_PASSPHRASE = os.environ.get("OKX_API_PASSPHRASE")

# Kh·ªüi t·∫°o OKX
exchange = ccxt.okx({
    'apiKey': OKX_API_KEY,
    'secret': OKX_API_SECRET,
    'password': OKX_API_PASSPHRASE,
    'enableRateLimit': True,
    'options': {
        'defaultType': 'swap'
    }
})

def fetch_sheet():
    try:
        csv_url = SPREADSHEET_URL.replace("/edit#gid=", "/export?format=csv&gid=")
        res = requests.get(csv_url)
        res.raise_for_status()
        return list(csv.reader(res.content.decode("utf-8").splitlines()))
    except Exception as e:
        logging.error(f"‚ùå Kh√¥ng th·ªÉ t·∫£i Google Sheet: {e}")
        return []

def run_bot():
    now = datetime.utcnow()
    rows = fetch_sheet()
    if not rows:
        return
    rows = rows[1:]

    for row in rows:
        try:
            logging.info(f"üîç Ki·ªÉm tra d√≤ng: {row}")
            if len(row) < 7:
                logging.warning("‚ö†Ô∏è D√≤ng thi·∫øu d·ªØ li·ªáu")
                continue

            symbol, signal, entry_price, sl_str, tp_str, created_at_str, interval = row
            entry_price = float(entry_price)
            sl = float(sl_str.strip('%')) / 100
            tp = float(tp_str.strip('%')) / 100
            interval = int(interval)
            created_at = datetime.strptime(created_at_str.strip(), "%Y-%m-%d %H:%M:%S")

            elapsed_minutes = (now - created_at).total_seconds() / 60
            if elapsed_minutes > interval:
                logging.info(f"‚è± L·ªánh qu√° h·∫°n: {symbol}")
                continue

            if signal not in ["LONG", "SHORT"]:
                logging.warning("‚ö†Ô∏è T√≠n hi·ªáu kh√¥ng h·ª£p l·ªá")
                continue

            side = "buy" if signal == "LONG" else "sell"
            pos_side = "long" if signal == "LONG" else "SHORT"
            
            # ‚úÖ L·∫•y danh s√°ch symbols t·ª´ API OKX (Futures)
            futures_symbols_okx = fetch_okx_usdt_futures_symbols()
            logging.info(f"‚úÖ ƒê√£ load {len(futures_symbols_okx)} USDT-M Futures symbols t·ª´ OKX")
            
            # ‚úÖ Duy·ªát t·ª´ng d√≤ng trong sheet
            symbol_raw = row[0]                            # V√≠ d·ª•: BTC-USDT
            symbol_check = f"{symbol_raw}-SWAP"  # BTC-USDT-SWAP
            symbol_ccxt = f"{symbol_raw.replace("-", "/")}:USDT".upper()   # BTC/USDT:USDT
            
            # ƒê·∫∑t ƒë√≤n b·∫©y 5x
            exchange.set_leverage(5, symbol)
            logging.info(f"‚öôÔ∏è ƒê√£ ƒë·∫∑t ƒë√≤n b·∫©y 5x cho {symbol}")

            # T√≠nh kh·ªëi l∆∞·ª£ng d·ª±a tr√™n 20 USDT v·ªën th·∫≠t v√† ƒë√≤n b·∫©y x5
            ticker = exchange.fetch_ticker(symbol)
            mark_price = float(ticker.get('last') or 0)

            if mark_price <= 0:
                logging.error(f"‚ö†Ô∏è Kh√¥ng l·∫•y ƒë∆∞·ª£c gi√° h·ª£p l·ªá cho {symbol}")
                return

            base_usdt = 20
            max_order_value = 1000000  # gi·ªõi h·∫°n OKX l√† 1 tri·ªáu
            safe_usdt = min(base_usdt, max_order_value * 0.9)  # ch·ªâ d√πng t·ªëi ƒëa 90% ng∆∞·ª°ng

            amount = round(safe_usdt / mark_price, 6)
            estimated_value = amount * mark_price

            if estimated_value > max_order_value:
                logging.warning(f"‚ö†Ô∏è Gi√° tr·ªã l·ªánh ~{estimated_value} USDT v∆∞·ª£t gi·ªõi h·∫°n OKX. H·ªßy l·ªánh.")
                return
            logging.info(f"‚úÖ ƒê·∫∑t l·ªánh {side} {symbol} v·ªõi amount = {amount}, gi√° hi·ªán t·∫°i = {mark_price}")
            
            # ‚úÖ Chu·∫©n h√≥a SYMBOL v√† SIDE t·ª´ ƒë·∫ßu v√†o
            symbol_check = symbol.replace("-", "/").upper()
            side_input = side.lower()
            side_check = 'long' if side_input == 'buy' else 'short' if side_input == 'sell' else None
            
            if side_check is None:
                logging.error(f"‚ùå SIDE kh√¥ng h·ª£p l·ªá: {side}")
                return
            
            # üîÅ L·∫•y gi√° th·ªã tr∆∞·ªùng hi·ªán t·∫°i
            ticker = exchange.fetch_ticker(symbol)
            market_price = ticker['last']

            # ‚úÖ Thi·∫øt l·∫≠p th√¥ng s·ªë l·ªánh
            usdt_before_leverage = 20  # m·ªói l·ªánh d√πng 20 USDT (tr∆∞·ªõc ƒë√≤n b·∫©y)
            leverage = 5
            usdt_total = usdt_before_leverage * leverage  # T·ªïng gi√° tr·ªã l·ªánh
            
            # ‚úÖ T√≠nh s·ªë l∆∞·ª£ng coin c·∫ßn mua
            amount = round(usdt_total / market_price, 6)  # L√†m tr√≤n 6 ch·ªØ s·ªë th·∫≠p ph√¢n
            
            # ‚úÖ G·ª≠i l·ªánh th·ªã tr∆∞·ªùng
            ticker = exchange.fetch_ticker(symbol)
            price = ticker['ask']
            usdt_amount = 20
            size = round(usdt_amount / price, 6)        
            
            logging.info(f"üîç Ki·ªÉm tra v·ªã th·∫ø ƒë√£ m·ªü v·ªõi SYMBOL = {symbol_check}, SIDE = {side_check}")
            
            # ‚úÖ Fetch t·∫•t c·∫£ v·ªã th·∫ø hi·ªán t·∫°i
            try:
                all_positions = exchange.fetch_positions()
            except Exception as e:
                logging.error(f"‚ùå Kh√¥ng th·ªÉ fetch v·ªã th·∫ø: {e}")
                return
                            logging.debug("--- START ki·ªÉm tra v·ªã th·∫ø t·ª´ OKX ---")
                for pos in all_positions:
                    pos_symbol = pos.get('symbol', '').upper()                      # V√≠ d·ª• BTC/USDT
                    side_open = pos.get('side', '').lower()                         # long / short
                    margin_mode = pos.get('marginMode', '')                         # isolated / cross
                
                    logging.debug(
                        f"[CHECK] ‚Ü™ pos_symbol={pos_symbol}, side_open={side_open}, "
                        f"margin_mode={margin_mode}"
                    )
                    logging.debug(
                        f"[CHECK] ‚Ü™ So v·ªõi: symbol_check={symbol_check}, side_check={side_check}"
                    )
                
                    if (
                        pos_symbol == symbol_check and
                        side_open == side_check and
                        margin_mode == 'isolated'
                    ):
                        logging.warning(
                            f"‚ö†Ô∏è ƒê√É C√ì V·ªä TH·∫æ {side_check.upper()} m·ªü v·ªõi {symbol_check} => KH√îNG ƒë·∫∑t th√™m l·ªánh"
                        )
                        continue        
            # ‚öôÔ∏è C·∫•u h√¨nh load markets cho futures
            exchange.options['defaultType'] = 'future'
            exchange.load_markets()
            market = exchange.markets.get(symbol_check)

            # ‚úÖ H√†m l·∫•y danh s√°ch symbol USDT-M Futures tr·ª±c ti·∫øp t·ª´ OKX
            def fetch_okx_usdt_futures_symbols():
                url = "https://www.okx.com/api/v5/public/instruments?instType=SWAP"  # ho·∫∑c FUTURES n·∫øu b·∫°n mu·ªën FUTURES thay v√¨ perpetual
                try:
                    response = requests.get(url)
                    response.raise_for_status()
                    data = response.json()
                    instruments = data.get("data", [])
                    symbols = []
            
                    for item in instruments:
                        # Ch·ªâ ch·ªçn USDT-M (linear), b·ªè qua COIN-M
                        if item.get("settleCcy") == "USDT" and item.get("ctType") in ["linear", None]:
                            inst_id = item["instId"]  # VD: BTC-USDT-SWAP
                            symbols.append(inst_id)
            
                    return list(set(symbols))  # Lo·∫°i tr√πng
                except Exception as e:
                    logging.error(f"‚ùå Kh√¥ng th·ªÉ fetch Futures symbols t·ª´ OKX: {e}")
                    return []
                    
            # ‚úÖ B∆∞·ªõc 1: check n·∫øu symbol kh√¥ng n·∫±m trong danh s√°ch fetch t·ª´ API OKX
            if symbol_check not in futures_symbols_okx:
                logging.warning(f"‚ö†Ô∏è Symbol {symbol_check} KH√îNG n·∫±m trong danh s√°ch USDT-M Futures. B·ªè qua.")
                continue
            
            logging.info(f"‚úÖ Symbol {symbol_check} H·ª¢P L·ªÜ. Ti·∫øp t·ª•c x·ª≠ l√Ω...")
            
            # ‚úÖ B∆∞·ªõc 2: Check trong exchange.markets xem symbol c√≥ t·ªìn t·∫°i v√† ƒë√∫ng lo·∫°i kh√¥ng
            market = exchange.markets.get(symbol_ccxt)
            logging.debug(f"‚Ü™ Th√¥ng tin th·ªã tr∆∞·ªùng: {market}")
            
            if not market:
                logging.error(f"‚ùå Symbol {symbol_ccxt} kh√¥ng t·ªìn t·∫°i trong exchange.markets!")
                continue
            
            # ‚úÖ B∆∞·ªõc 3: Check ƒë√∫ng lo·∫°i USDT-M Futures/Swap (Linear)
            market_type = market.get('type')
            settle_coin = market.get('settle')
                
            logging.debug(f"‚Ü™ Ki·ªÉm tra type={market_type}, settle={settle_coin}")
                
            if settle_coin and settle_coin.lower() == 'usdt' and market_type in ['future', 'swap']:
                logging.info(f"‚úÖ Symbol {symbol_ccxt} l√† USDT-M {market_type.upper()} ‚ûú Cho ph√©p ƒë·∫∑t l·ªánh")
                continue
            logging.error(f"‚ùå Symbol {symbol_ccxt} kh√¥ng ph·∫£i USDT-M Futures (type={market_type}, settle={settle_coin})! B·ªè qua...")
            continue
            
            
            # ‚úÖ v√†o l·ªánh 
            logging.info(f"üîÑ G·ª≠i l·ªánh market: symbol={symbol}, side={side}, size={size}, params={params}")
            order = exchange.create_market_order(
                symbol=symbol,
                side=side,
                amount=size,
                params={
                    "tdMode": "isolated",
                    "ccy": "USDT",
                    "reduceOnly": False,
                    "lever": "5"
                }
            )
            # ‚úÖ Ki·ªÉm tra ph·∫£n h·ªìi h·ª£p l·ªá t·ª´ l·ªánh
            if (
                not order
                or 'data' not in order
                or not isinstance(order['data'], list)
                or len(order['data']) == 0
                or 'ordId' not in order['data'][0]
            ):
                logging.error(f"‚ùå L·ªánh kh√¥ng h·ª£p l·ªá, kh√¥ng t·∫°o TP/SL. Ph·∫£n h·ªìi: {order}")
                continue

            order_id = order['data'][0]['ordId']
            logging.info(f"‚ö†Ô∏è Order ID: {order_id}")
            logging.info(f"‚úÖ M·ªü l·ªánh {signal} {symbol} v·ªõi 20 USDT ƒë√≤n b·∫©y 5x th√†nh c√¥ng")
            
            # ‚úÖ G·ªçi API ƒë·ªÉ l·∫•y th√¥ng tin order ƒë√£ kh·ªõp, bao g·ªìm gi√° kh·ªõp (avgPx)
            order_detail = exchange.private_get_trade_order({'ordId': order_id})

            # ‚úÖ Ki·ªÉm tra d·ªØ li·ªáu tr·∫£ v·ªÅ t·ª´ API
            if not order_detail or 'data' not in order_detail or not order_detail['data']:
                logging.error(f"‚ùå Kh√¥ng th·ªÉ l·∫•y th√¥ng tin kh·ªõp l·ªánh t·ª´ order_id = {order_id}")
                continue

            # ‚úÖ N·∫øu d·ªØ li·ªáu h·ª£p l·ªá, l·∫•y gi√° trung b√¨nh kh·ªõp l·ªánh
            avg_price = float(order_detail['data'][0].get('avgPx', 0))

            # ‚úÖ N·∫øu avg_price = 0 th√¨ kh√¥ng n√™n ti·∫øp t·ª•c
            if avg_price == 0:
                logging.error(f"‚ùå Gi√° avgPx = 0 t·ª´ order_id = {order_id}, kh√¥ng t·∫°o ƒë∆∞·ª£c TP/SL")
                continue
                
            # ‚úÖ T√≠nh TP v√† SL theo % nh·∫≠p t·ª´ Google Sheet
            tp_price = avg_price * (1 + tp) if signal == "LONG" else avg_price * (1 - tp)
            sl_price = avg_price * (1 - sl) if signal == "LONG" else avg_price * (1 + sl)

            # ‚úÖ T·∫°o TP (Take Profit)
            exchange.private_post_trade_order_algo({
                "instId": symbol,
                "tdMode": "isolated",
                "side": "sell" if signal == "LONG" else "buy",
                "ordType": "take_profit",
                "sz": str(amount),
                "tpTriggerPx": round(tp_price, 6),
                "tpOrdPx": "-1"
            })

            # ‚úÖ T·∫°o SL (Stop Loss)
            exchange.private_post_trade_order_algo({
                "instId": symbol,
                "tdMode": "isolated",
                "side": "sell" if signal == "LONG" else "buy",
                "ordType": "stop_loss",
                "sz": str(amount),
                "slTriggerPx": round(sl_price, 6),
                "slOrdPx": "-1"
            })
            exchange.private_post_trade_order_algo({
                "instId": symbol,
                "tdMode": "isolated",
                "side": "sell" if signal == "LONG" else "buy",
                "ordType": "take_profit",
                "sz": str(amount),
                "tpTriggerPx": round(tp_price, 6),
                "tpOrdPx": "-1",
            })

            exchange.private_post_trade_order_algo({
                "instId": symbol,
                "tdMode": "isolated",
                "side": "sell" if signal == "LONG" else "buy",
                "ordType": "stop",
                "sz": str(amount),
                "slTriggerPx": round(sl_price, 6),
                "slOrdPx": "-1",
                "posSide": pos_side
            })

            logging.info(f"üéØ TP/SL ƒë·∫∑t xong cho {symbol}: TP={round(tp_price,6)} | SL={round(sl_price,6)}")

        except Exception as e:
            logging.error(f"‚ùå L·ªói x·ª≠ l√Ω d√≤ng: {e}")

if __name__ == "__main__":
    logging.info("üöÄ B·∫Øt ƒë·∫ßu ch·∫°y script main.py")
    run_bot()
