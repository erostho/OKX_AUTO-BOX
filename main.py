
import os
import csv
import logging
import requests
from datetime import datetime
import ccxt

# Logging setup
logging.basicConfig(level=logging.INFO, format='%(asctime)s | %(levelname)s | %(message)s')

# ƒê·ªçc bi·∫øn m√¥i tr∆∞·ªùng
SPREADSHEET_URL = os.environ.get("SPREADSHEET_URL")
OKX_API_KEY = os.environ.get("OKX_API_KEY")
OKX_API_SECRET = os.environ.get("OKX_API_SECRET")
OKX_API_PASSPHRASE = os.environ.get("OKX_API_PASSPHRASE")

# Kh·ªüi t·∫°o OKX
exchange = ccxt.okx({
    'apiKey': OKX_API_KEY,
    'secret': OKX_API_SECRET,
    'password': OKX_API_PASSPHRASE,
    'enableRateLimit': True,
    'options': {
        'defaultType': 'swap'
    }
})

def fetch_sheet():
    try:
        csv_url = SPREADSHEET_URL.replace("/edit#gid=", "/export?format=csv&gid=")
        res = requests.get(csv_url)
        res.raise_for_status()
        return list(csv.reader(res.content.decode("utf-8").splitlines()))
    except Exception as e:
        logging.error(f"‚ùå Kh√¥ng th·ªÉ t·∫£i Google Sheet: {e}")
        return []

def run_bot():
    now = datetime.utcnow()
    rows = fetch_sheet()
    if not rows:
        return
    rows = rows[1:]

    for row in rows:
        try:
            logging.info(f"üîç Ki·ªÉm tra d√≤ng: {row}")
            if len(row) < 7:
                logging.warning("‚ö†Ô∏è D√≤ng thi·∫øu d·ªØ li·ªáu")
                continue

            symbol, signal, entry_price, sl_str, tp_str, created_at_str, interval = row
            entry_price = float(entry_price)
            sl = float(sl_str.strip('%')) / 100
            tp = float(tp_str.strip('%')) / 100
            interval = int(interval)
            created_at = datetime.strptime(created_at_str.strip(), "%Y-%m-%d %H:%M:%S")

            elapsed_minutes = (now - created_at).total_seconds() / 60
            if elapsed_minutes > interval:
                logging.info(f"‚è± L·ªánh qu√° h·∫°n: {symbol}")
                continue

            if signal not in ["LONG", "SHORT"]:
                logging.warning("‚ö†Ô∏è T√≠n hi·ªáu kh√¥ng h·ª£p l·ªá")
                continue

            side = "buy" if signal == "LONG" else "sell"
            pos_side = "long" if signal == "LONG" else "SHORT"

            # ƒê·∫∑t ƒë√≤n b·∫©y 5x
            exchange.set_leverage(5, symbol)
            logging.info(f"‚öôÔ∏è ƒê√£ ƒë·∫∑t ƒë√≤n b·∫©y 5x cho {symbol}")

            # T√≠nh kh·ªëi l∆∞·ª£ng d·ª±a tr√™n 20 USDT v·ªën th·∫≠t v√† ƒë√≤n b·∫©y x5
            ticker = exchange.fetch_ticker(symbol)
            mark_price = float(ticker.get('last') or 0)

            if mark_price <= 0:
                logging.error(f"‚ö†Ô∏è Kh√¥ng l·∫•y ƒë∆∞·ª£c gi√° h·ª£p l·ªá cho {symbol}")
                return

            base_usdt = 20
            max_order_value = 1000000  # gi·ªõi h·∫°n OKX
            safe_usdt = min(base_usdt, max_order_value * 0.9)

            amount = round(safe_usdt / mark_price, 6)

            # N·∫øu s·ªë l∆∞·ª£ng coin v∆∞·ª£t ng∆∞·ª°ng cho ph√©p ‚Üí kh√¥ng ƒë·∫∑t
            max_amount_allowed = 999999  # Ng∆∞·ª°ng gi·ªõi h·∫°n s·ªë l∆∞·ª£ng coin (v√≠ d·ª• 999,999)
            if amount > max_amount_allowed:
                logging.warning(f"‚ö†Ô∏è S·ªë l∆∞·ª£ng {amount} qu√° l·ªõn v·ªõi gi√° {mark_price}, b·ªè qua l·ªánh {symbol}")
                return

            # ∆Ø·ªõc t√≠nh l·∫°i gi√° tr·ªã ƒë·ªÉ ƒë·∫£m b·∫£o kh√¥ng v∆∞·ª£t qu√° limit OKX
            estimated_value = amount * mark_price
            if estimated_value > max_order_value:
                logging.warning(f"‚ö†Ô∏è Gi√° tr·ªã l·ªánh ~{estimated_value} USDT v∆∞·ª£t gi·ªõi h·∫°n OKX. H·ªßy l·ªánh.")
                return
           
            # L·∫•y danh s√°ch v·ªã th·∫ø
            positions = exchange.fetch_positions()
            # Chu·∫©n h√≥a instId
            symbol_swap = symbol + "-SWAP"
            
            # --- KI·ªÇM TRA V·ªä TH·∫æ ƒêANG M·ªû ---
            existing_position = next(
                (p for p in positions if p['symbol'] == symbol and p['info']['posSide'] == pos_side and float(p['info']['availPos']) > 0),
                None
            )
            if existing_position:
                logging.info(f"‚ö†Ô∏è ƒê√£ c√≥ v·ªã th·∫ø {pos_side} ƒëang m·ªü cho {symbol}, b·ªè qua kh√¥ng ƒë·∫∑t l·ªánh tr√πng.")
                return
                
            # ƒê·∫∑t l·ªánh khi kh√¥ng tr√πng
            logging.info(f"‚úÖ ƒê·∫∑t l·ªánh {side} {symbol} v·ªõi amount = {amount}, gi√° hi·ªán t·∫°i = {mark_price}")
            try:
                order = exchange.create_market_order(
                    symbol=symbol,
                    side=side,
                    amount=amount,
                    params={
                        "sz": str(amount),
                        "tdMode": "isolated"
                    }
                )
            except Exception as e:
                logging.error(f"‚ùå L·ªói khi ƒë·∫∑t l·ªánh: {e}")
            logging.info(f"‚úÖ M·ªü l·ªánh {signal} {symbol} v·ªõi 20 USDT ƒë√≤n b·∫©y 5x th√†nh c√¥ng")
                        # Ki·ªÉm tra l·ªánh c√≥ h·ª£p l·ªá kh√¥ng
            if not order or 'data' not in order or not order['data']:
                logging.error("‚ùå Kh√¥ng th·ªÉ l·∫•y order ID v√¨ order kh√¥ng h·ª£p l·ªá.")
                return
            
            # L·∫•y order_id ƒë·ªÉ x·ª≠ l√Ω TP/SL
            order_id = order['data'][0]['ordId']
            
            # G·ªçi h√†m t·∫°o TP/SL
            create_tp_sl_orders(
                exchange=exchange,
                symbol=symbol,
                side=side.upper(),      # "LONG" ho·∫∑c "SHORT"
                amount=amount,
                order_id=order_id,
                tp_percent=0.15,        # TP 15%
                sl_percent=0.1         # SL 10%
            )

            def create_tp_sl_orders(exchange, symbol, side, amount, order_id, tp_percent, sl_percent):
            try:
                # L·∫•y th√¥ng tin kh·ªõp l·ªánh
                order_detail = exchange.private_get_trade_order({'ordId': order_id})
                if not order_detail or 'data' not in order_detail or not order_detail['data']:
                    logging.error(f"‚ùå Kh√¥ng th·ªÉ l·∫•y th√¥ng tin kh·ªõp l·ªánh t·ª´ order_id = {order_id}")
                    return


                    avg_price = float(order_detail['data'][0]['avgPx'])
            
                    # T√≠nh gi√° TP v√† SL
                    tp_price = avg_price * (1 + tp_percent) if side.upper() == "LONG" else avg_price * (1 - tp_percent)
                    sl_price = avg_price * (1 - sl_percent) if side.upper() == "LONG" else avg_price * (1 + sl_percent)

                    # G·ª≠i l·ªánh TP
                    exchange.private_post_trade_order_algo({
                        "instId": symbol,
                        "tdMode": "isolated",
                        "side": "sell" if side.upper() == "LONG" else "buy",
                        "ordType": "take_profit",
                        "sz": str(amount),
                        "tpTriggerPx": round(tp_price, 6),
                        "tpOrdPx": "-1"
                    })
            
                    # G·ª≠i l·ªánh SL
                    exchange.private_post_trade_order_algo({
                        "instId": symbol,
                        "tdMode": "isolated",
                        "side": "sell" if side.upper() == "LONG" else "buy",
                        "ordType": "stop_loss",
                        "sz": str(amount),
                        "slTriggerPx": round(sl_price, 6),
                        "slOrdPx": "-1"
                    })
            
                    logging.info(f"‚úÖ ƒê√£ t·∫°o TP/SL cho {symbol} - TP: {tp_price:.6f}, SL: {sl_price:.6f}")
            
                except Exception as e:
                    logging.error(f"‚ùå L·ªói khi t·∫°o TP/SL: {e}")
            
            
            # --- SAU KHI ƒê·∫∂T L·ªÜNH CH√çNH XONG ---
            try:
                order = exchange.create_market_order(
                    symbol=symbol,
                    side=side,
                    amount=amount,
                    params={
                        "tdMode": "isolated",
                        "sz": str(amount),
                        "posSide": pos_side
                    }
                 )
            except Exception as e:
                logging.error(f"‚ùå L·ªói khi ƒë·∫∑t l·ªánh ch√≠nh: {e}")
                return
        
if __name__ == "__main__":
    logging.info("üöÄ B·∫Øt ƒë·∫ßu ch·∫°y script main.py")
    run_bot()
