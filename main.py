
import requests
import ccxt
import pandas as pd
import json
import time
import hmac
import base64
import hashlib
from datetime import datetime, timedelta
from pytz import timezone
import os
from pytz import timezone

# Thi·∫øt l·∫≠p th√¥ng tin API OKX t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
API_KEY = os.getenv("OKX_API_KEY")
API_SECRET = os.getenv("OKX_API_SECRET")
API_PASSPHRASE = os.getenv("OKX_PASSPHRASE")

# Thi·∫øt l·∫≠p ƒë∆∞·ªùng d·∫´n sheet CSV c√¥ng khai
sheet_url = "https://docs.google.com/spreadsheets/d/1AmnD1ekwTZeZrp8kGRCymMDwCySJkec0WdulNX9LyOY/export?format=csv"
df = pd.read_csv(sheet_url)
# =============================================
# ================== L√†m s·∫°ch v√† chu·∫©n ho√° c·ªôt Th·ªùi gian ==================

# B∆∞·ªõc 1: lo·∫°i b·ªè d√≤ng null trong c·ªôt "Th·ªùi gian"
df = df.dropna(subset=["Th·ªùi gian"])

# B∆∞·ªõc 2: chuy·ªÉn v·ªÅ chu·ªói v√† l√†m s·∫°ch k√Ω t·ª± ·∫©n (Unicode space)
df["Th·ªùi gian"] = df["Th·ªùi gian"].astype(str).str.strip().str.replace(r"\u202f", " ", regex=True)

# B∆∞·ªõc 3: c·ªë g·∫Øng parse datetime linh ho·∫°t nh·∫•t
from dateutil import parser

def try_parse(x):
    try:
        return parser.parse(x, dayfirst=True)
    except:
        return pd.NaT

df["Th·ªùi gian"] = df["Th·ªùi gian"].apply(try_parse)

# In test
print("üïµÔ∏è‚Äç‚ôÇÔ∏è 5 d√≤ng ƒë·∫ßu sau khi chu·∫©n ho√° th·ªùi gian:", df["Th·ªùi gian"].head())
print("‚ùå D√≤ng b·ªã l·ªói th·ªùi gian (NaT):", df["Th·ªùi gian"].isna().sum())
print("üü° Th·ªùi gian nh·ªè nh·∫•t trong sheet:", df["Th·ªùi gian"].min())
print("üü¢ Th·ªùi gian l·ªõn nh·∫•t trong sheet:", df["Th·ªùi gian"].max())

# ================== L·∫•y gi·ªù h·ªá th·ªëng UTC+7 ==================

from pytz import timezone
now = datetime.now(timezone("Asia/Ho_Chi_Minh")).replace(tzinfo=None)
print("üïì Gi·ªù h·ªá th·ªëng (UTC+7):", now)

# ================== L·ªçc trong 60 ph√∫t g·∫ßn nh·∫•t ==================

df = df[df["Th·ªùi gian"] > now - timedelta(minutes=60)]
print("‚úÖ Sau khi l·ªçc th·ªùi gian 60 ph√∫t:", len(df))

# Ti·∫øp t·ª•c l·ªçc theo xu h∆∞·ªõng n·∫øu mu·ªën
df = df[df["Xu h∆∞·ªõng"].str.upper().isin(["TƒÇNG M·∫†NH", "GI·∫¢M M·∫†NH"])]

print("‚úÖ S·ªë coin h·ª£p l·ªá sau l·ªçc:", len(df))
print(f"Sau khi l·ªçc null: {len(df)}")
print(f"Sau khi l·ªçc xu h∆∞·ªõng: {len(df)}")
print(f"Sau khi l·ªçc th·ªùi gian 60': {len(df)}")
print(df[["Th·ªùi gian"]].head())  # In th·ª≠ 5 d√≤ng
print("D√≤ng b·ªã l·ªói th·ªùi gian (NaT):", df["Th·ªùi gian"].isna().sum())
print("Gi·ªù h·ªá th·ªëng (UTC+7):", now)
print("Th·ªùi gian nh·ªè nh·∫•t trong sheet:", df["Th·ªùi gian"].min())
print("Th·ªùi gian l·ªõn nh·∫•t trong sheet:", df["Th·ªùi gian"].max())
# Kh·ªüi t·∫°o ccxt ƒë·ªÉ l·∫•y gi√° coin t·ª´ OKX
exchange = ccxt.okx()
from datetime import datetime, timedelta
print(f"üìä S·ªë coin h·ª£p l·ªá sau l·ªçc: {len(df)}")
for index, row in df.iterrows():
    print(f"‚è≥ ƒêang x·ª≠ l√Ω d√≤ng {index + 1} - Coin: {row['Coin']}")
    
    try:
        coin = row['Coin'].replace("-", "").upper()
        inst_id = row['Coin'].replace("-", "").upper()
        side = "long" if row['Xu h∆∞·ªõng'].strip().upper() == "TƒÇNG M·∫†NH" else "short"

        # L·∫•y gi√° hi·ªán t·∫°i
        ticker = exchange.fetch_ticker(coin)
        price = ticker['last']
        lower_price = round(price * 0.85, 4)
        upper_price = round(price * 1.15, 4)

        # T·∫°o payload
        payload = {
            "instId": inst_id,
            "algoType": "grid",
            "minPx": lower_price,
            "maxPx": upper_price,
            "gridNum": 20,
            "lever": "5",
            "direction": side,
            "investment": "10"
        }

        body = json.dumps(payload)
        timestamp = str(time.time())
        method = "POST"
        request_path = "/api/v5/tradingBot/grid/orderAlgo"
        message = timestamp + method + request_path + body

        signature = base64.b64encode(
            hmac.new(API_SECRET.encode("utf-8"), message.encode("utf-8"), hashlib.sha256).digest()
        ).decode()

        headers = {
            "Content-Type": "application/json",
            "OK-ACCESS-KEY": API_KEY,
            "OK-ACCESS-SIGN": signature,
            "OK-ACCESS-TIMESTAMP": timestamp,
            "OK-ACCESS-PASSPHRASE": API_PASSPHRASE
        }

        # In log t·∫°o bot (c√≥ th·ªÉ thay b·∫±ng requests.post n·∫øu mu·ªën g·ªçi th·∫≠t)
        response = requests.post("https://www.okx.com" + request_path, headers=headers, data=body)
        print(response.json())

    except Exception as e:
        print(f"‚ö†Ô∏è L·ªói khi x·ª≠ l√Ω {row['Coin']}: {e}")
        print(f"‚ö†Ô∏è L·ªói t·ªïng qu√°t: {e}")
