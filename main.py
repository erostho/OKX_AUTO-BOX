import csv
import os
import requests
import logging
from datetime import datetime
import ccxt

# C·∫•u h√¨nh log
logging.basicConfig(level=logging.INFO, format='%(asctime)s | %(levelname)s | %(message)s')

# L·∫•y bi·∫øn m√¥i tr∆∞·ªùng
OKX_API_KEY = os.getenv("OKX_API_KEY")
OKX_API_SECRET = os.getenv("OKX_API_SECRET")
OKX_API_PASSPHRASE = os.getenv("OKX_API_PASSPHRASE")
SPREADSHEET_URL = os.getenv("SPREADSHEET_URL")

# Kh·ªüi t·∫°o k·∫øt n·ªëi OKX
exchange = ccxt.okx({
    "apiKey": OKX_API_KEY,
    "secret": OKX_API_SECRET,
    "password": OKX_API_PASSPHRASE,
    "enableRateLimit": True,
    "options": {
        "defaultType": "swap"
    }
})

def download_csv(url):
    response = requests.get(url)
    response.raise_for_status()
    return response.text

def parse_csv(text):
    rows = []
    reader = csv.reader(text.strip().split("\n"))
    next(reader)  # b·ªè d√≤ng ti√™u ƒë·ªÅ
    for row in reader:
        if len(row) >= 7:
            rows.append(row)
    return rows

def run_bot():
    now = datetime.utcnow()
    try:
        logging.info("üì• B·∫Øt ƒë·∫ßu ch·∫°y script main.py")
        csv_text = download_csv(SPREADSHEET_URL)
        rows = parse_csv(csv_text)
        logging.info(f"üìä ƒê√£ t·∫£i {len(rows)} t√≠n hi·ªáu t·ª´ Google Sheet")
    except Exception as e:
        logging.error(f"‚ùå Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu Google Sheet: {e}")
        return

    for row in rows:
        try:
            logging.info(f"üîç ƒêang ki·ªÉm tra d√≤ng: {row}")
            if len(row) < 7:
                logging.warning(f"‚ö†Ô∏è B·ªè qua d√≤ng kh√¥ng ƒë·ªß 7 c·ªôt: {row}")
                continue

            symbol, signal, entry_price, sl_str, tp_str, created_at_str, interval = row

            # √âp ki·ªÉu
            entry_price = float(entry_price)
            sl = float(sl_str.strip('%')) / 100
            tp = float(tp_str.strip('%')) / 100
            interval = int(interval)

            created_at = datetime.strptime(created_at_str.strip(), "%Y-%m-%d %H:%M:%S")
            elapsed_minutes = (now - created_at).total_seconds() / 60

            if elapsed_minutes > interval:
                logging.info(f"‚è© B·ªè qua l·ªánh qu√° h·∫°n cho {symbol} - {signal}")
                continue

            if signal not in ["LONG", "SHORT"]:
                logging.warning(f"‚ö†Ô∏è B·ªè qua t√≠n hi·ªáu kh√¥ng h·ª£p l·ªá: {signal}")
                continue

            # Thi·∫øt l·∫≠p ƒë√≤n b·∫©y 5x
            try:
                exchange.set_leverage(5, symbol)
                logging.info(f"üéØ ƒê√£ thi·∫øt l·∫≠p ƒë√≤n b·∫©y 5x cho {symbol}")
            except Exception as e:
                logging.warning(f"‚ö†Ô∏è Kh√¥ng th·ªÉ thi·∫øt l·∫≠p ƒë√≤n b·∫©y cho {symbol}: {e}")

            usdt_amount = 20
            mark_price = exchange.fetch_ticker(symbol)['last']
            amount = round(usdt_amount / mark_price, 4)

            logging.info(f"üü¢ M·ªü l·ªánh {signal} {symbol} v·ªõi {usdt_amount} USDT, SL: {sl*100}%, TP: {tp*100}%")

            if signal == "LONG":
                order = exchange.create_market_buy_order(symbol, amount)
            else:
                order = exchange.create_market_sell_order(symbol, amount)

            logging.info(f"‚úÖ ƒê·∫∑t l·ªánh th√†nh c√¥ng cho {symbol}: {signal}")
        except Exception as e:
            logging.error(f"‚ùå L·ªói x·ª≠ l√Ω d√≤ng: {row} | L·ªói: {e}")

if __name__ == "__main__":
    run_bot()
